基于手动FreeRtos：
一、
1、can1和can2配置的屏蔽及初始化的删除，实现
2、RTOS的手动完善，实现
3、DBUS的接收，remote_task，实现
4、judge_task，实现，detect_task，待先加各个任务实现，待实现
5、完善了工程的可读性
6、NVIC已配(HAL_Init())，led，buzzer, Pump，tim相关->编码器、pwm、定时，已加
7、底层硬件LL库搭建，完成


8、开始classcic_task，待实现

9、功能任务，待实现

10、中断优先级，待分配




Base:等效于DEVICE
Task:同
USERLIB：算法库,部分已加
HARDWARE：部分已加

注：所有均可改




//	LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
//	
//	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)(&USART1->DR));
//  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)rc_rx_buf0);
//  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, 36);

//	LL_DMA_DisableStream(DMA2,LL_DMA_STREAM_2);	//双缓冲模式，待定
//	LL_DMA_ConfigAddresses  (DMA2,LL_DMA_STREAM_2,(uint32_t)(&USART1->DR),(uint32_t)rc_rx_buf1,LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
//	LL_DMA_SetCurrentTargetMem  (DMA2,LL_DMA_STREAM_2,LL_DMA_CURRENTTARGETMEM0);
//	LL_DMA_EnableDoubleBufferMode  (DMA2,LL_DMA_STREAM_2);	
//	
////	LL_USART_EnableIT_RXNE(USART1);   
//	//	LL_USART_EnableIT_IDLE(USART1);   				//注：法一：IDLE+RXNE，法二：BUFF+IDLE ，方法三:BUFF+DMA(选)
//	
//	LL_USART_EnableDMAReq_RX(USART1);
//	LL_DMA_ClearFlag_TC2(DMA2); 
//	LL_DMA_EnableStream(DMA2,LL_DMA_STREAM_2);


