基于手动FreeRtos：
一、
1、can1和can2配置的屏蔽及初始化的删除，实现
2、RTOS的手动完善，实现
3、DBUS的接收，remote_task，实现
4、judge_task，实现，detect_task，待先加各个任务实现，待实现
5、完善了工程的可读性
6、NVIC已配(HAL_Init())，led，buzzer, Pump，tim相关->编码器、pwm、定时，已加
7、底层硬件LL库搭建，完成

8、开始classcic_task，实现
9、function_task，buzzer_task，remoter_task，over_chip_task实现


10、中断优先级，待分配

11、can1,can2,   detect_task,judge_task实现

12、裁判系统judge_task：发送任务通知API，暂时丢在function_task.c，因usart8中断无法测试进入中断发任务中断API。

13、键盘响应已注释。

14、
遥控器逻辑（暂定）
抬升：S2-1 3 2 (高 中 低)  -->     3 2 1 (高 中 低)     S2-3 to 1 进行+1/-1       (注：要顺序 ，抬升时不能伸出，伸出时不能翻转）   
伸出：S2-1 to 3->ch1       -->      S2-3 to 2 进行+1/-1    1缩回  2伸中250  3伸小15cm   4伸大   (注：KA待测伸出编码器测量)

翻转：S1-3 to 1                    1平（松）   2翻（夹）			
夹取：S1-3 to 1	3-1-> 1松             2夹	                  即：松必是平
设备切换：S1-3 to 2 


Base:等效于DEVICE
Task:同
USERLIB：算法库,部分已加
HARDWARE：部分已加

注：所有均可改

2022.4.4
1、3508电机里程计用了比较简便些的写法。
2、翻转已调。
3、伸出待调，夹取待优化，救援卡和救援待加。
4、后期想提速的话，把motor_ampere[0]=Pid_Position_Calc(&motor_fl_speed_pid, speed_fl, chassis_motor[0].speed_rpm);
 chassis_motor[0].speed_rpm-> chassis_motor[0].actual_torque_current，再调参

