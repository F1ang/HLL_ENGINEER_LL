基于手动FreeRtos：
一、
1、can1和can2配置的屏蔽及初始化的删除，实现
2、RTOS的手动完善，实现
3、DBUS的接收，remote_task，实现
4、judge_task，实现，detect_task，待先加各个任务实现，待实现
5、完善了工程的可读性
6、NVIC已配(HAL_Init())，led，buzzer, Pump，tim相关->编码器、pwm、定时，已加
7、底层硬件LL库搭建，完成

8、开始classcic_task，实现
9、function_task，buzzer_task，remoter_task，over_chip_task实现


10、中断优先级，待分配

11、can1,can2,   detect_task,judge_task实现

12、裁判系统judge_task：发送任务通知API，暂时丢在function_task.c，因usart8中断无法测试进入中断发任务中断API。

13、键盘响应已注释。

Base:等效于DEVICE
Task:同
USERLIB：算法库,部分已加
HARDWARE：部分已加

注：所有均可改

2022.4.4
1、3508电机里程计用了比较简便些的写法。
2、翻转已调。
3、伸出待调，夹取待优化，救援卡和救援待加。
4、后期想提速的话，把motor_ampere[0]=Pid_Position_Calc(&motor_fl_speed_pid, speed_fl, chassis_motor[0].speed_rpm);
 chassis_motor[0].speed_rpm-> chassis_motor[0].actual_torque_current，再调参

2022.5.23
			/********键鼠和遥控********/
	1、遥控器:
	S1(3,1)，1-键鼠，2-遥控
	S2(3,2)，1-抬小，2-抬中，3-抬大     救援(暂时调试用)
	S2(1,3)，1-缩回，2-伸中250，3-伸小15cm ，4-伸大
	S2(3,1)，1-平，2-翻(夹紧和缩回到1->翻转)   复活卡(暂时调试用) 1-松，2-夹
  	CH0-左右平移，CH1-摄像头 ，CH2-左右，CH3-前后
	
	2、键鼠:
	模式：M，1-键鼠，2-遥控(可选)
	
	抬升：Q，1-放下 2-抬小  3-抬大    Q+CTRL，放下  1-放下和微调关
	remote_controller.press_l，2-升微调   remote_controller.press_r，3-降微调  
	救援：F，1-不伸出 2-伸出
	
	伸缩：E，1-缩回 2-伸小 3-伸中 4-伸大	 E+CTRL，1-缩回和微调关
	Z，2-伸微调   C,3-缩微调  
	
	爪子：R，1-翻，0-平
	复活卡：G，1-伸，0-缩
	夹取：C，1-夹，0-松

	底盘：W-前，S-后，A-左平移,D-右平移，  (可优化-SHIFT+W/S/A/D,加速冲出)
	屏幕：remote_controller.x-左右移   (Z-左，C-右) 
	摄像头：remote_controller.y-上下移


	注:shift(加速冲出，待实现)
